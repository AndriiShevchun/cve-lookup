(ns cve-lookup.fetch
  (:require [net.cgrand.enlive-html :as html]
            [clj-http.client :as httpc])
  (:import [java.net URL]
           [java.io File]))

(def nvd-nist-gov "https://nvd.nist.gov/vuln/data-feeds#JSON_FEED")
(def dir "/Users/andriishevchun/Test_projects/cve_lookup/resources/downloads")

(defn download-unzip [url dir]
  (let [saveDir (File. dir)]
    (with-open [stream (-> (httpc/get url {:as :stream})
                           (:body)
                           (java.util.zip.ZipInputStream.))]
      (loop [entry (.getNextEntry stream)]
        (if entry
          (let [savePath (str dir File/separatorChar (.getName entry))
                saveFile (File. savePath)]
            (if (.isDirectory entry)
              (if-not (.exists saveFile)
                (.mkdirs saveFile))
              (let [parentDir (File. (.substring savePath 0 (.lastIndexOf savePath (int File/separatorChar))))]
                (if-not (.exists parentDir) (.mkdirs parentDir))
                (clojure.java.io/copy stream saveFile)))
            (recur (.getNextEntry stream))))))))

(defn find-nested
  [m k]
  (->> (tree-seq coll? seq m)
       (filter coll?)
       (keep k)))

(defn load-files-by-link
  []
  (let [page (html/html-resource (URL. nvd-nist-gov))
        table (first (html/select page [:table]))
        links (find-nested (html/select table
                                        [(html/attr-contains :data-testid "-zip") :a])
                           :href)]
    (doseq [link links]
      (download-unzip link dir))))