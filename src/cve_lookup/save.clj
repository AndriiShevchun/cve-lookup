(ns cve-lookup.save
  (:require [clojure.data.json :as json]
            [cve-lookup.db.repository :as repo]
            [clj-postgresql.types :as tp]
            [clj-time.coerce :as c]
            [cve-lookup.config :as con]))

(defn read-and-save-file
  [file-path]
  (let [db (con/database)
        lines (get-in (json/read-str (slurp (first file-path))
                                     :key-fn
                                     keyword)
                      [:CVE_Items])
        insert (atom [])]
    (if (get
          (repo/check-file-already-processed db {:name (last file-path)})
          :check_files) ;;Will add more logic here
      (doseq [line lines]
        (let [id (get-in line [:cve :CVE_data_meta :ID])
              description (get (first (get-in line [:cve :description :description_data])) :value)
              reference-urls (tp/map->parameter (get-in line [:cve :references :reference_data]) :json)
              impact-score (get-in line [:impact :baseMetricV2 :impactScore])
              severity (get-in line [:impact :baseMetricV2 :severity])
              published-date (c/to-sql-date (get-in line [:publishedDate]))
              last-modified-date (c/to-sql-date (get-in line [:lastModifiedDate]))
              meta-file (tp/map->parameter line :json)
              data [id description reference-urls
                    impact-score severity published-date
                    last-modified-date meta-file]]
          (reset! insert (conj @insert data))
          (if (= (count @insert) 1000)
            (do (repo/insert-look-up-one db {:datas @insert})
                (reset! insert []))))))
    (if (> (count @insert) 0)
      (repo/insert-look-up-one db {:datas @insert}))))