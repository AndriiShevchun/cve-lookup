(ns cve-lookup.save
  (:require [clojure.data.json :as json]
            [cve-lookup.db.repository :as repo]
            [clj-postgresql.types :as tp]
            [clj-time.coerce :as c]
            [clojure.tools.logging :as log]
            [cve-lookup.config :as config]))

(defn line-transfrom [line]
  (let [id (get-in line [:cve :CVE_data_meta :ID])
        description (get (first (get-in line [:cve :description :description_data])) :value)
        reference-urls (tp/map->parameter (get-in line [:cve :references :reference_data]) :json)
        impact-score (get-in line [:impact :baseMetricV2 :impactScore])
        severity (get-in line [:impact :baseMetricV2 :severity])
        published-date (c/to-sql-date (get-in line [:publishedDate]))
        last-modified-date (c/to-sql-date (get-in line [:lastModifiedDate]))
        meta-file (tp/map->parameter line :json)
        data [id description reference-urls
              impact-score severity published-date
              last-modified-date meta-file]]
    data))

(defn file-exists? [file-name]
  (let [db (config/database)]
    (if (= file-name
           (config/modified-file-name))
      false
      (nil? (get
              (first
                (repo/check-file-already-processed db {:name file-name}))
              :name)))))

(defn insert-into-db [lines]
  (let [db (config/database)
        insert (doall (pmap line-transfrom lines))]
    (repo/insert-look-up-one db {:datas insert})))

(defn read-and-save-file
  [file-path]
  (let [file-name (second file-path)
        cve-all (get-in (json/read-str (slurp (first file-path))
                                       :key-fn
                                       keyword)
                        [:CVE_Items])
        cve-part (partition-all 1000
                                cve-all)]
    (if-not (file-exists? file-name)
      (do (doseq [lines cve-part]
            (insert-into-db lines))
          )
      (log/info "File"
                file-name
                "already loaded"))))