(ns cve-lookup.rpc.app
  (:require [compojure.api.sweet :refer [api routes GET]]
            [schema.core :as s]
            [cve-lookup.db.repository :as repo]
            [ring.util.http-response :as ring.http]
            [ring.util.response :refer :all]
            [ring.middleware.defaults :refer :all]
            [ring.middleware.json :refer :all]
            [mount.core :refer [defstate]]
            [cve-lookup.config :as config]
            [cve-lookup.config :as c]
            [cve-lookup.fetch :as f]
            [clojure.core.async :as a]
            [ring.adapter.jetty-async :refer [run-jetty-async]])

  (:import (org.joda.time DateTime)))

(defn cve-id-handler [id]
  (let [result (repo/select-cve-id (c/database) {:id id})]
    (if (empty? result)
      (ring.http/not-found "ID not found")
      (ring.http/ok result))))

(defn cve-ids-handler [ids]
  (let [result (repo/select-cve-ids (c/database) {:ids ids})]
    (if (empty? result)
      (ring.http/not-found "IDs not found")
      (ring.http/ok result))))

(defn latest-file-handler []
  (f/load-files-by-link (config/mask-recent-files))
  (ring.http/ok "Ok"))

(defn cve-page-ids-handler [ids page]
  (let [selected (repo/select-cve-ids (c/database) {:ids ids})
        part (partition-all 2 selected)]
    ;(println part)
    (nth part
         (- page 1)
         (ring.http/not-found "Page not found"))))

#_(s/defschema urls
    {:url       s/Str
     :name      s/Str
     :tags      s/Any
     :refsource s/Str})


(s/defschema IdResponce
  {:id                 s/Str
   :description        s/Str
   :reference_urls     [s/Any]                              ;[urls]
   :impact_score       (s/maybe s/Num)
   :severity           (s/maybe s/Str)
   :published_date     s/Any                                ;DateTime
   :last_modified_date s/Any                                ;DateTime
   })

(def IdRequest #"^[a-zA-Z]{3}-[0-9]{4}-[0-9]{4,5}$")

(def app-routes
  [(GET "/cve/:id" []
     :responses {200 {:schema IdResponce, :description "CVE information for 1 ID"}
                 400 {:schema s/Str, :description "Parameter did not pass validation"}
                 404 {:schema s/Str, :description "ID not found"}}
     :path-params [id :- IdRequest]
     (cve-id-handler id))
   (GET "/cve-ids/" []
     :responses {200 {:schema [IdResponce], :description "CVE information for many ids"}}
     :query-params [ids :- [IdRequest]]
     (cve-ids-handler ids))
   (GET "/recent-data/" []
     :responses {200 {:description "Download modified file from https://nvd.nist.gov/vuln/data-feeds#JSON_FEED"}}
     (latest-file-handler))

   (GET "/cve-ids-page/" []
     :responses {200 {:schema [IdResponce], :description "CVE information for many ids. 1 page can contain max 2 cve"}
                 404 {:schema s/Str, :description "Page not found"}}
     :query-params [ids :- [IdRequest]
                    page :- s/Int]
     (cve-page-ids-handler ids page))
  #_ (GET "/hello-async/" []
   :query-params [name :- String]
   ;(a/go
    ; (a/<! (a/timeout 500))
   ;  (ring.http/internal-server-error "Ok")
   (hello-world name "test" "test1")
   ;)
  )
   ] )

(def swagger-config
  {:ui      "/swagger"
   :spec    "/swagger.json"
   :options {:ui       {:validatorUrl nil}
             :produces ["application/json"]
             :data     {:info {:version "1.0.0", :title "CVE_Lookup"}}}})

(def app (api {:swagger swagger-config} (apply routes app-routes)))

(defstate server
          :start (run-jetty-async app (c/server))
          :stop (.stop server))